[2023-06-28 02:22:24] [INFO] Command executed: /home/levi/yjl/PEAL/experiments/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/trainval.py
[2023-06-28 02:22:24] [INFO] Configs:
{
    "seed": 7351,
    "working_dir": "/home/levi/yjl/PEAL/experiments/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn",
    "root_dir": "/home/levi/yjl/PEAL",
    "exp_name": "geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn",
    "output_dir": "/home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn",
    "snapshot_dir": "/home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/snapshots",
    "log_dir": "/home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/logs",
    "event_dir": "/home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/events",
    "feature_dir": "/home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/features",
    "registration_dir": "/home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/registration",
    "data": {
        "dataset_root": "/home/levi/yjl/pcrcg_data/geotransformer_color/Geotransformer_implicit_color/data/3DMatch"
    },
    "train": {
        "batch_size": 1,
        "num_workers": 8,
        "point_limit": 30000,
        "use_augmentation": true,
        "augmentation_noise": 0.005,
        "augmentation_rotation": 1.0,
        "image_path": "/home/lab507/data/3img_3dmatch/3dmatch_image",
        "geo_train_prior": "/home/levi/yjl/PEAL-V1/data_prior/geo_prior_train_epoch-15-rre19.287",
        "geo_prior": "/home/levi/yjl/PEAL-V1/data_prior/geo_prior_testval",
        "prior_min_points": 100,
        "overlap_min_points": 50,
        "superglue_prior": "/home/lab507/data/SuperGluePretrainedNetwork-master/dump_match_pairs_160_2img",
        "using_geo_prior": true,
        "using_2d_prior": true,
        "superglue_window_size": 5
    },
    "test": {
        "batch_size": 1,
        "num_workers": 8,
        "point_limit": null,
        "using_iter_prior": true
    },
    "eval": {
        "acceptance_overlap": 0.0,
        "acceptance_radius": 0.1,
        "inlier_ratio_threshold": 0.05,
        "rmse_threshold": 0.2,
        "rre_threshold": 15.0,
        "rte_threshold": 0.3
    },
    "ransac": {
        "distance_threshold": 0.05,
        "num_points": 3,
        "num_iterations": 1000
    },
    "optim": {
        "lr": 0.0001,
        "lr_decay": 0.95,
        "lr_decay_steps": 1,
        "weight_decay": 1e-06,
        "max_epoch": 42,
        "grad_acc_steps": 1
    },
    "backbone": {
        "num_stages": 4,
        "init_voxel_size": 0.025,
        "kernel_size": 15,
        "base_radius": 2.5,
        "base_sigma": 2.0,
        "init_radius": 0.0625,
        "init_sigma": 0.05,
        "group_norm": 32,
        "input_dim": 1,
        "init_dim": 64,
        "output_dim": 256
    },
    "model": {
        "ground_truth_matching_radius": 0.05,
        "num_points_in_patch": 64,
        "num_sinkhorn_iterations": 100
    },
    "coarse_matching": {
        "num_targets": 128,
        "overlap_threshold": 0.1,
        "num_correspondences": 256,
        "dual_normalization": true
    },
    "geotransformer": {
        "input_dim": 1024,
        "hidden_dim": 256,
        "output_dim": 256,
        "num_heads": 4,
        "blocks": [
            "self",
            "cross",
            "self",
            "cross",
            "self",
            "cross"
        ],
        "sigma_d": 0.2,
        "sigma_a": 15,
        "angle_k": 3,
        "reduction_a": "max"
    },
    "fine_matching": {
        "topk": 3,
        "acceptance_radius": 0.1,
        "mutual": true,
        "confidence_threshold": 0.05,
        "use_dustbin": false,
        "use_global_score": false,
        "correspondence_threshold": 3,
        "correspondence_limit": null,
        "num_refinement_steps": 5
    },
    "coarse_loss": {
        "positive_margin": 0.1,
        "negative_margin": 1.4,
        "positive_optimal": 0.1,
        "negative_optimal": 1.4,
        "log_scale": 24,
        "positive_overlap": 0.1
    },
    "fine_loss": {
        "positive_radius": 0.05
    },
    "loss": {
        "weight_coarse_loss": 1.0,
        "weight_fine_loss": 1.0
    }
}
[2023-06-28 02:22:24] [INFO] Tensorboard is enabled. Write events to /home/levi/yjl/PEAL/output/geotransformer.3dmatch.stage4.gse.k3.max.oacl.stage2.sinkhorn/events.
[2023-06-28 02:22:24] [INFO] Using Single-GPU mode.
[2023-06-28 02:22:26] [INFO] Data loader created: 1.421s collapsed.
[2023-06-28 02:22:26] [INFO] Calibrate neighbors: [38 35 35 38].
[2023-06-28 02:22:27] [INFO] Model description:
GeoTransformer(
  (backbone): KPConvFPN(
    (encoder1_1): ConvBlock(
      (KPConv): KPConv(kernel_size: 15, in_channels: 1, out_channels: 64, radius: 0.0625, sigma: 0.05, bias: True)
      (norm): GroupNorm(
        (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder1_2): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=64, out_features=32, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 32, out_channels: 32, radius: 0.0625, sigma: 0.05, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=32, out_features=128, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): UnaryBlock(
        (mlp): Linear(in_features=64, out_features=128, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
      )
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder2_1): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=128, out_features=32, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 32, out_channels: 32, radius: 0.0625, sigma: 0.05, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 32, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=32, out_features=128, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder2_2): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=128, out_features=64, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 64, out_channels: 64, radius: 0.125, sigma: 0.1, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=64, out_features=256, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): UnaryBlock(
        (mlp): Linear(in_features=128, out_features=256, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder2_3): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=256, out_features=64, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 64, out_channels: 64, radius: 0.125, sigma: 0.1, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=64, out_features=256, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder3_1): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=256, out_features=64, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 64, out_channels: 64, radius: 0.125, sigma: 0.1, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=64, out_features=256, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder3_2): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=256, out_features=128, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 128, out_channels: 128, radius: 0.25, sigma: 0.2, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=128, out_features=512, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): UnaryBlock(
        (mlp): Linear(in_features=256, out_features=512, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
      )
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder3_3): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=512, out_features=128, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 128, out_channels: 128, radius: 0.25, sigma: 0.2, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=128, out_features=512, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder4_1): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=512, out_features=128, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 128, out_channels: 128, radius: 0.25, sigma: 0.2, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=128, out_features=512, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder4_2): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=512, out_features=256, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 256, out_channels: 256, radius: 0.5, sigma: 0.4, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=256, out_features=1024, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 1024, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): UnaryBlock(
        (mlp): Linear(in_features=512, out_features=1024, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 1024, eps=1e-05, affine=True)
        )
      )
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (encoder4_3): ResidualBlock(
      (unary1): UnaryBlock(
        (mlp): Linear(in_features=1024, out_features=256, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (KPConv): KPConv(kernel_size: 15, in_channels: 256, out_channels: 256, radius: 0.5, sigma: 0.4, bias: True)
      (norm_conv): GroupNorm(
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (unary2): UnaryBlock(
        (mlp): Linear(in_features=256, out_features=1024, bias=True)
        (norm): GroupNorm(
          (norm): GroupNorm(32, 1024, eps=1e-05, affine=True)
        )
      )
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (decoder3): UnaryBlock(
      (mlp): Linear(in_features=1536, out_features=512, bias=True)
      (norm): GroupNorm(
        (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
      )
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (decoder2): LastUnaryBlock(
      (mlp): Linear(in_features=768, out_features=256, bias=True)
    )
  )
  (transformer): GeometricTransformer(
    (embedding): GeometricStructureEmbedding(
      (embedding): SinusoidalPositionalEmbedding()
      (proj_d): Linear(in_features=256, out_features=256, bias=True)
      (proj_a): Linear(in_features=256, out_features=256, bias=True)
    )
    (in_proj): Linear(in_features=1024, out_features=256, bias=True)
    (transformer): RPEConditionalTransformer(
      (layers): ModuleList(
        (0): RPETransformerLayer(
          (attention): RPEAttentionLayer(
            (attention): RPEMultiHeadAttention(
              (proj_q): Linear(in_features=256, out_features=256, bias=True)
              (proj_k): Linear(in_features=256, out_features=256, bias=True)
              (proj_v): Linear(in_features=256, out_features=256, bias=True)
              (proj_p): Linear(in_features=256, out_features=256, bias=True)
              (dropout): Identity()
            )
            (linear): Linear(in_features=256, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
          (output): AttentionOutput(
            (expand): Linear(in_features=256, out_features=512, bias=True)
            (activation): ReLU()
            (squeeze): Linear(in_features=512, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (1): TransformerLayer(
          (attention): AttentionLayer(
            (attention): MultiHeadAttention(
              (proj_q): Linear(in_features=256, out_features=256, bias=True)
              (proj_k): Linear(in_features=256, out_features=256, bias=True)
              (proj_v): Linear(in_features=256, out_features=256, bias=True)
              (dropout): Identity()
            )
            (linear): Linear(in_features=256, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
          (output): AttentionOutput(
            (expand): Linear(in_features=256, out_features=512, bias=True)
            (activation): ReLU()
            (squeeze): Linear(in_features=512, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (2): RPETransformerLayer(
          (attention): RPEAttentionLayer(
            (attention): RPEMultiHeadAttention(
              (proj_q): Linear(in_features=256, out_features=256, bias=True)
              (proj_k): Linear(in_features=256, out_features=256, bias=True)
              (proj_v): Linear(in_features=256, out_features=256, bias=True)
              (proj_p): Linear(in_features=256, out_features=256, bias=True)
              (dropout): Identity()
            )
            (linear): Linear(in_features=256, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
          (output): AttentionOutput(
            (expand): Linear(in_features=256, out_features=512, bias=True)
            (activation): ReLU()
            (squeeze): Linear(in_features=512, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (3): TransformerLayer(
          (attention): AttentionLayer(
            (attention): MultiHeadAttention(
              (proj_q): Linear(in_features=256, out_features=256, bias=True)
              (proj_k): Linear(in_features=256, out_features=256, bias=True)
              (proj_v): Linear(in_features=256, out_features=256, bias=True)
              (dropout): Identity()
            )
            (linear): Linear(in_features=256, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
          (output): AttentionOutput(
            (expand): Linear(in_features=256, out_features=512, bias=True)
            (activation): ReLU()
            (squeeze): Linear(in_features=512, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (4): RPETransformerLayer(
          (attention): RPEAttentionLayer(
            (attention): RPEMultiHeadAttention(
              (proj_q): Linear(in_features=256, out_features=256, bias=True)
              (proj_k): Linear(in_features=256, out_features=256, bias=True)
              (proj_v): Linear(in_features=256, out_features=256, bias=True)
              (proj_p): Linear(in_features=256, out_features=256, bias=True)
              (dropout): Identity()
            )
            (linear): Linear(in_features=256, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
          (output): AttentionOutput(
            (expand): Linear(in_features=256, out_features=512, bias=True)
            (activation): ReLU()
            (squeeze): Linear(in_features=512, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (5): TransformerLayer(
          (attention): AttentionLayer(
            (attention): MultiHeadAttention(
              (proj_q): Linear(in_features=256, out_features=256, bias=True)
              (proj_k): Linear(in_features=256, out_features=256, bias=True)
              (proj_v): Linear(in_features=256, out_features=256, bias=True)
              (dropout): Identity()
            )
            (linear): Linear(in_features=256, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
          (output): AttentionOutput(
            (expand): Linear(in_features=256, out_features=512, bias=True)
            (activation): ReLU()
            (squeeze): Linear(in_features=512, out_features=256, bias=True)
            (dropout): Identity()
            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (out_proj): Linear(in_features=256, out_features=256, bias=True)
  )
  (coarse_target): SuperPointTargetGenerator()
  (coarse_matching): SuperPointMatching()
  (fine_matching): LocalGlobalRegistration(
    (procrustes): WeightedProcrustes()
  )
  (optimal_transport): LearnableLogOptimalTransport(num_iterations=100)
)
[2023-06-28 02:22:31] [INFO] Epoch: 1/42, iter: 10/20642, loss: 3.058, c_loss: 1.213, f_loss: 1.845, PIR: 0.041, IR: 0.463, RRE: 79.635, RTE: 2.170, RMSE: 0.977, RR: 0.300, lr: 1.000e-04, time: 0.401s/0.284s
